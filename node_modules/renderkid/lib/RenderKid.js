"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
var AnsiPainter, Layout, RenderKid, Styles, blockStyleApplier, cloneAndMergeDeep, inlineStyleApplier, isPlainObject, stripAnsi, terminalWidth, tools;
inlineStyleApplier = require('./renderKid/styleApplier/inline');
blockStyleApplier = require('./renderKid/styleApplier/block');
isPlainObject = require('lodash/isPlainObject');

var _require = require('./tools');

cloneAndMergeDeep = _require.cloneAndMergeDeep;
AnsiPainter = require('./AnsiPainter');
Styles = require('./renderKid/Styles');
Layout = require('./Layout');
tools = require('./tools');
stripAnsi = require('strip-ansi');
terminalWidth = require('./tools').getCols();

module.exports = RenderKid = function () {
  var self;

  var RenderKid = /*#__PURE__*/function () {
    function RenderKid() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, RenderKid);

      this.tools = self.tools;
      this._config = cloneAndMergeDeep(self._defaultConfig, config);

      this._initStyles();
    }

    _createClass(RenderKid, [{
      key: "_initStyles",
      value: function _initStyles() {
        return this._styles = new Styles();
      }
    }, {
      key: "style",
      value: function style() {
        return this._styles.setRule.apply(this._styles, arguments);
      }
    }, {
      key: "_getStyleFor",
      value: function _getStyleFor(el) {
        return this._styles.getStyleFor(el);
      }
    }, {
      key: "render",
      value: function render(input) {
        var withColors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        return this._paint(this._renderDom(this._toDom(input)), withColors);
      }
    }, {
      key: "_toDom",
      value: function _toDom(input) {
        if (typeof input === 'string') {
          return this._parse(input);
        } else if (isPlainObject(input) || Array